name: Trigger Devin for Docs Update

on:
  push:
    branches:
      - main
      - test/devin-workflow-trigger

permissions:
  contents: read # Required to read github.event.head_commit.message

jobs:
  show-head-commit-message:
    runs-on: ubuntu-latest
    steps:
      - name: Show head commit message
        env:
          HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          MESSAGE="DEBUG: Head commit message is: $HEAD_COMMIT_MESSAGE"
          echo "$MESSAGE"

  trigger-devin-docs-analysis:
    # This job runs only if the head commit message on the push to main is exactly 'chore: version packages'
    if: |
      contains(github.event.head_commit.message, 'chore: version packages')
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Notification for Docs Analysis
        env:
          DEVIN_SLACK_WEBHOOK_URL: ${{ secrets.DEVIN_SLACK_WEBHOOK_URL }}
          # APPKIT_REPO is the repository where this workflow is running, assumed to be reown-com/appkit
          APPKIT_REPO: ${{ github.repository }}
          # COMMIT_SHA is the SHA of the triggering 'chore: version packages' commit
          COMMIT_SHA: ${{ github.sha }}
          COMMIT_URL: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}
          PROMPT_TEXT: |
            ## Context

            A commit titled "chore: version packages" (SHA: ${{ env.COMMIT_SHA }}) was just pushed to the main branch of the ${{ env.APPKIT_REPO }} repository. This commit is typically the result of a merged Pull Request.
            Your task is to analyze the impact of this specific commit on the reown-com/reown-docs repository.

            Please examine the changes introduced by commit ${{ env.COMMIT_SHA }} in the ${{ env.APPKIT_REPO }} repository. Focus your examination on the content of any `CHANGELOG.md` files modified in this commit. (Note: if multiple CHANGELOG.md files were part of this commit and are identical, examining one is sufficient, as per repository conventions).

            Determine if any of the changes in the `CHANGELOG.md`(s) from this commit necessitate updates to the documentation in the reown-com/reown-docs repository.

            ## Advice
            * If documentation updates are required, create a pull request in the reown-com/reown-docs repository. The pull request should:
                * Include the necessary documentation updates reflecting the changes from the appkit changelog.
                * Contain a clear description of why the updates are needed, referencing the specific changes from the appkit repository.
                * Include a link back to the original "chore: version packages" commit in the ${{ env.APPKIT_REPO }} repository (Commit: ${{ env.COMMIT_URL }}).
            * If no documentation updates are needed, clearly state this conclusion. You do not need to open a pull request in this case. Simply report that no updates are necessary based on your analysis of the changelog.
            * You will need to operate within the following repositories: ${{ env.APPKIT_REPO }} (for reading the changelog of the commit) and reown-com/reown-docs (for potentially creating a PR with documentation updates).
        run: |
          # Construct the message text, prefixing PROMPT_TEXT with "@devin "
          # Note: PROMPT_TEXT is already expanded with its newlines and other GitHub Actions context variables here.
          MESSAGE_TEXT="@devin ${PROMPT_TEXT}"

          # Create the JSON payload for Slack.
          # The 'jq -n --arg key "value"' syntax is used to safely create a JSON object
          # with a string value, ensuring that any special characters in MESSAGE_TEXT
          # (like newlines, quotes, backslashes) are correctly escaped by jq to form a valid JSON string.
          JSON_PAYLOAD=$(jq -n --arg text "$MESSAGE_TEXT" '{text: $text}')

          echo "Sending Slack notification for Docs Analysis."
          echo "AppKit Repo: ${{ env.APPKIT_REPO }}"
          echo "Commit SHA: ${{ env.COMMIT_SHA }}"
          echo "Commit URL: ${{ env.COMMIT_URL }}"
          # For debugging the payload if needed (uncomment if there are issues):
          # echo "Slack Payload: $JSON_PAYLOAD"

          # Send the notification to Slack using curl
          # The -s flag makes curl silent (no progress meter)
          # The -X POST specifies the HTTP method
          # The -H adds a Content-Type header
          # The -d provides the data (our JSON payload)
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            "${{ env.DEVIN_SLACK_WEBHOOK_URL }}")

          # Check the response from the Slack API.
          # A successful Slack webhook POST request typically returns the string "ok".
          if [ "$RESPONSE" = "ok" ]; then
            echo "Slack notification sent successfully."
          else
            echo "Error sending Slack notification."
            echo "Response from Slack: $RESPONSE"
            # Exiting with 1 will mark the GitHub Actions step as failed.
            exit 1
          fi
